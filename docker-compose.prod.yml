version: '3.8'

services:
  api-gateway:
    container_name: api-gateway
    build:
      context: .
      dockerfile: ./apps/api-gateway/Dockerfile.prod
    #    command: npm run start:dev --workspace=api-gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    env_file:
      - .env
    restart: always
    depends_on:
      - db

  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile.prod
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
    env_file:
      - .env
    restart: always

  scan:
    container_name: scan
    build:
      context: .
      dockerfile: ./apps/scan/Dockerfile.prod
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
    env_file:
      - .env
    restart: always
    depends_on:
      - db

  ingredients-recognition:
    container_name: ingredients-recognition
    build:
      context: ./apps/ingredients-recognition
      dockerfile: Dockerfile
    ports:
      - "3010:3010"
    env_file:
      - .env
    restart: always

  db:
    container_name: db
    image: postgres:17.4-alpine
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always

volumes:
  postgres_data: